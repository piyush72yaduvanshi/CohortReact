/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MakingChaiImport } from './routes/making-chai'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as AppRoutesImport } from './routes/app/routes'
import { Route as AppDashboardImport } from './routes/app/dashboard'
import { Route as ProductsPidImport } from './routes/Products.$pid'

// Create Virtual Routes

const ProductsLazyImport = createFileRoute('/Products')()

// Create/Update Routes

const ProductsLazyRoute = ProductsLazyImport.update({
  id: '/Products',
  path: '/Products',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/Products.lazy').then((d) => d.Route))

const MakingChaiRoute = MakingChaiImport.update({
  id: '/making-chai',
  path: '/making-chai',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppRoutesRoute = AppRoutesImport.update({
  id: '/app/routes',
  path: '/app/routes',
  getParentRoute: () => rootRoute,
} as any)

const AppDashboardRoute = AppDashboardImport.update({
  id: '/app/dashboard',
  path: '/app/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ProductsPidRoute = ProductsPidImport.update({
  id: '/$pid',
  path: '/$pid',
  getParentRoute: () => ProductsLazyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/making-chai': {
      id: '/making-chai'
      path: '/making-chai'
      fullPath: '/making-chai'
      preLoaderRoute: typeof MakingChaiImport
      parentRoute: typeof rootRoute
    }
    '/Products': {
      id: '/Products'
      path: '/Products'
      fullPath: '/Products'
      preLoaderRoute: typeof ProductsLazyImport
      parentRoute: typeof rootRoute
    }
    '/Products/$pid': {
      id: '/Products/$pid'
      path: '/$pid'
      fullPath: '/Products/$pid'
      preLoaderRoute: typeof ProductsPidImport
      parentRoute: typeof ProductsLazyImport
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/app/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof rootRoute
    }
    '/app/routes': {
      id: '/app/routes'
      path: '/app/routes'
      fullPath: '/app/routes'
      preLoaderRoute: typeof AppRoutesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ProductsLazyRouteChildren {
  ProductsPidRoute: typeof ProductsPidRoute
}

const ProductsLazyRouteChildren: ProductsLazyRouteChildren = {
  ProductsPidRoute: ProductsPidRoute,
}

const ProductsLazyRouteWithChildren = ProductsLazyRoute._addFileChildren(
  ProductsLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/making-chai': typeof MakingChaiRoute
  '/Products': typeof ProductsLazyRouteWithChildren
  '/Products/$pid': typeof ProductsPidRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/routes': typeof AppRoutesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/making-chai': typeof MakingChaiRoute
  '/Products': typeof ProductsLazyRouteWithChildren
  '/Products/$pid': typeof ProductsPidRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/routes': typeof AppRoutesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/making-chai': typeof MakingChaiRoute
  '/Products': typeof ProductsLazyRouteWithChildren
  '/Products/$pid': typeof ProductsPidRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/routes': typeof AppRoutesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/making-chai'
    | '/Products'
    | '/Products/$pid'
    | '/app/dashboard'
    | '/app/routes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/making-chai'
    | '/Products'
    | '/Products/$pid'
    | '/app/dashboard'
    | '/app/routes'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/making-chai'
    | '/Products'
    | '/Products/$pid'
    | '/app/dashboard'
    | '/app/routes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  MakingChaiRoute: typeof MakingChaiRoute
  ProductsLazyRoute: typeof ProductsLazyRouteWithChildren
  AppDashboardRoute: typeof AppDashboardRoute
  AppRoutesRoute: typeof AppRoutesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  MakingChaiRoute: MakingChaiRoute,
  ProductsLazyRoute: ProductsLazyRouteWithChildren,
  AppDashboardRoute: AppDashboardRoute,
  AppRoutesRoute: AppRoutesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/about",
        "/making-chai",
        "/Products",
        "/app/dashboard",
        "/app/routes"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/making-chai": {
      "filePath": "making-chai.jsx"
    },
    "/Products": {
      "filePath": "Products.lazy.jsx",
      "children": [
        "/Products/$pid"
      ]
    },
    "/Products/$pid": {
      "filePath": "Products.$pid.jsx",
      "parent": "/Products"
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.jsx"
    },
    "/app/routes": {
      "filePath": "app/routes.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
